package com.htp.prowork.controller;

import com.htp.prowork.controller.requests.ClientCreateRequest;
import com.htp.prowork.domain.hibernate.HibClient;
import com.htp.prowork.repository.hibernate.HClientInterface;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/hibernate/client")
public class HibernateClientController {

    @Autowired
    private HClientInterface hClientInterface;

    @GetMapping("/all")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<HibClient>> getUsersHibernate() {
        return new ResponseEntity<>(hClientInterface.findAll(), HttpStatus.OK);
    }

    @PostMapping("/add")
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<HibClient> createItem(@RequestBody ClientCreateRequest request) {
        HibClient hibClient = new HibClient();
        //userID is empty - will be generated by DB
        hibClient.setName(request.getName());
        hibClient.setPhone(request.getPhone());
        hibClient.setMail(request.getMail());
        hibClient.setPassword(request.getPassword());
        hibClient.setDateFrom(new Timestamp(new Date().getTime()));

        return new ResponseEntity<>(hClientInterface.save(hibClient), HttpStatus.OK);
    }

    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibClient> updateItem(@ApiParam(value = "Client ID", required = false) @PathVariable("id") Long id,
                                                @RequestBody ClientCreateRequest request) {



        HibClient hibClient = hClientInterface.findById(id);
        //userID is empty - will be generated by DB
        hibClient.setName(request.getName());
        hibClient.setPhone(request.getPhone());
        hibClient.setPassword(request.getMail());
        hibClient.setPassword(request.getPassword());

        return new ResponseEntity<>(hClientInterface.update(hibClient), HttpStatus.OK);
    }

    @RequestMapping(value = "getClientById/{id}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibClient> getItemById(@PathVariable("id") Long id) {
        return new ResponseEntity<>(hClientInterface.findById(id), HttpStatus.OK);
    }

    @DeleteMapping("/delete/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteItem(@PathVariable("id") Long id) {
        hClientInterface.delete(id);
        return new ResponseEntity<>(id, HttpStatus.OK);
    }
}
