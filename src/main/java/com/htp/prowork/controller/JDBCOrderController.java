package com.htp.prowork.controller;


import com.htp.prowork.controller.requests.OrderCreateRequest;
import com.htp.prowork.domain.Order;
import com.htp.prowork.repository.OrderDao;
import com.htp.prowork.tools.Util;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/order")
public class JDBCOrderController {
    @Autowired
    @Qualifier("orderDaoImpl")
    private OrderDao orderDao;


    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<Order>> getOrders() {
        return new ResponseEntity<>(orderDao.findAll(), HttpStatus.OK);
    }

    @ApiOperation(value = "SELECT order by orderID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful order selected"),
            @ApiResponse(code = 400, message = "Invalid ORDER ID selected"),
            @ApiResponse(code = 404, message = "Order was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @RequestMapping(value = "getOrderById/{id}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Order> getOrderById(@PathVariable("id") Long orderId) {
        return new ResponseEntity<>(orderDao.findById(orderId), HttpStatus.OK);
    }

    @PostMapping
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<Order> createOrder(@RequestBody OrderCreateRequest request) {
        Order order = new Order();
        //userID is empty - will be generated by DB
        order.setType(request.getType());
        order.setDescription(request.getDescription());
        order.setAddress(request.getAddress());
        order.setLatitude(request.getLatitude());
        order.setLongtitude(request.getLongtitude());
        order.setIdClient(request.getIdClient());
        order.setCountWorker(request.getCountWorker());
        order.setDateCreate(new Timestamp(new Date().getTime()));
        order.setDateFromOrder(Util.convertStringToTimestamp(request.getDateFromOrder()));
        order.setStatus(request.getStatus());
        order.setPrioritet(request.getPrioritet());

        Order savedOrder = orderDao.save(order);

        return new ResponseEntity<>(savedOrder, HttpStatus.OK);
    }

    @ApiOperation(value = "Update order by orderID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful order update"),
            @ApiResponse(code = 400, message = "Invalid ORDER ID supplied"),
            @ApiResponse(code = 404, message = "Order was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
/*    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
    })*/
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Order> updateOrder(@PathVariable("id") Long orderId,
                                           @RequestBody OrderCreateRequest request) {

        Order order = orderDao.findById(orderId);
        //userID is empty - will be generated by DB
        order.setType(request.getType());
        order.setDescription(request.getDescription());
        order.setAddress(request.getAddress());
        order.setLatitude(request.getLatitude());
        order.setLongtitude(request.getLongtitude());
        order.setCountWorker(request.getCountWorker());
        order.setDateFromOrder(Util.convertStringToTimestamp(request.getDateFromOrder()));
        order.setStatus(request.getStatus());
        order.setPrioritet(request.getPrioritet());

        Order updatedOrder = orderDao.update(order);

        return new ResponseEntity<>(updatedOrder, HttpStatus.OK);
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteOrder(@PathVariable("id") Long orderId) {
        orderDao.delete(orderId);
        return new ResponseEntity<>(orderId, HttpStatus.OK);
    }



}
