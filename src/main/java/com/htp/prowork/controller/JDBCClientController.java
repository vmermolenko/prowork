package com.htp.prowork.controller;

import com.htp.prowork.controller.requests.ClientCreateRequest;
import com.htp.prowork.domain.Client;
import com.htp.prowork.repository.ClientDao;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/client")
public class JDBCClientController {

    @Autowired
    @Qualifier("clientDaoImpl")
    private ClientDao clientDao;


    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<Client>> getItems() {
        return new ResponseEntity<>(clientDao.findAll(), HttpStatus.OK);
    }

    @ApiOperation(value = "SELECT client by clientID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful client selected"),
            @ApiResponse(code = 400, message = "Invalid client ID selected"),
            @ApiResponse(code = 404, message = "Client was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
    @RequestMapping(value = "getclientById/{id}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Client> getClientById(@PathVariable("id") Long id) {
        return new ResponseEntity<>(clientDao.findById(id), HttpStatus.OK);
    }

    @PostMapping
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<Client> createClient(@RequestBody ClientCreateRequest request) {
        Client client = new Client();
        //userID is empty - will be generated by DB
        client.setName(request.getName());
        client.setPhone(request.getPhone());
        client.setMail(request.getMail());
        client.setPassword(request.getPassword());
        client.setDateFrom(new Timestamp(new Date().getTime()));

        Client savedClient = clientDao.save(client);

        return new ResponseEntity<>(savedClient, HttpStatus.OK);
    }

    @ApiOperation(value = "Update client by clientID")
    @ApiResponses({
            @ApiResponse(code = 200, message = "Successful client update"),
            @ApiResponse(code = 400, message = "Invalid CLIENT ID supplied"),
            @ApiResponse(code = 404, message = "Client was not found"),
            @ApiResponse(code = 500, message = "Server error, something wrong")
    })
/*    @ApiImplicitParams({
            @ApiImplicitParam(name = "X-Auth-Token", value = "token", required = true, dataType = "string", paramType = "header")
    })*/
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Client> updateItem(@PathVariable("id") Long id,
                                             @RequestBody ClientCreateRequest request) {

        Client client = clientDao.findById(id);
        //userID is empty - will be generated by DB
        client.setName(request.getName());
        client.setPhone(request.getPhone());
        client.setMail(request.getMail());
        client.setPassword(request.getPassword());

        Client updatedItem = clientDao.update(client);

        return new ResponseEntity<>(updatedItem, HttpStatus.OK);
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteItem(@PathVariable("id") Long id) {
        clientDao.delete(id);
        return new ResponseEntity<>(id, HttpStatus.OK);
    }
}
