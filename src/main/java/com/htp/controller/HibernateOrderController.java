package com.htp.controller;

import com.htp.controller.requests.OrderCreateRequest;
import com.htp.domain.hibernate.HibOrder;
import com.htp.repository.hibernate.HOrderIntarface;
import com.htp.tools.Util;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/hibernate/order")
public class HibernateOrderController {

    @Autowired
    private HOrderIntarface hOrderIntarface;

    @GetMapping("/all")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<HibOrder>> getUsersHibernate() {
        return new ResponseEntity<>(hOrderIntarface.findAll(), HttpStatus.OK);
    }

    @PostMapping("/add")
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<HibOrder> createOrder(@RequestBody OrderCreateRequest request) {
        HibOrder hibOrder = new HibOrder();
        //userID is empty - will be generated by DB
        hibOrder.setType(request.getType());
        hibOrder.setDescription(request.getDescription());
        hibOrder.setAddress(request.getAddress());
        hibOrder.setLatitude(request.getLatitude());
        hibOrder.setLongtitude(request.getLongtitude());
        hibOrder.setIdClient(request.getIdClient());
        hibOrder.setCountWorker(request.getCountWorker());
        hibOrder.setDateCreate(new Timestamp(new Date().getTime()));
        hibOrder.setDateFromOrder(Util.convertStringToTimestamp(request.getDateFromOrder()));
        hibOrder.setStatus(request.getStatus());
        hibOrder.setPrioritet(request.getPrioritet());

        return new ResponseEntity<>(hOrderIntarface.save(hibOrder), HttpStatus.OK);
    }

    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibOrder> updateOrder(@ApiParam(value = "Order ID", required = false) @PathVariable("id") Long orderId,
                                                @RequestBody OrderCreateRequest request) {

        hOrderIntarface.findById(orderId);

        HibOrder hibOrder = new HibOrder();
        //userID is empty - will be generated by DB
        hibOrder.setId(orderId);
        hibOrder.setType(request.getType());
        hibOrder.setDescription(request.getDescription());
        hibOrder.setAddress(request.getAddress());
        hibOrder.setLatitude(request.getLatitude());
        hibOrder.setLongtitude(request.getLongtitude());
        hibOrder.setIdClient(request.getIdClient());
        hibOrder.setCountWorker(request.getCountWorker());
        hibOrder.setDateCreate(new Timestamp(new Date().getTime()));
        hibOrder.setDateFromOrder(Util.convertStringToTimestamp(request.getDateFromOrder()));
        hibOrder.setStatus(request.getStatus());
        hibOrder.setPrioritet(request.getPrioritet());

        return new ResponseEntity<>(hOrderIntarface.update(hibOrder), HttpStatus.OK);
    }

    @RequestMapping(value = "getOrderById/{id}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibOrder> getOrderById(@PathVariable("id") Long orderId) {
        return new ResponseEntity<>(hOrderIntarface.findById(orderId), HttpStatus.OK);
    }

    @DeleteMapping("/delete/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteOrder(@PathVariable("id") Long orderId) {
        hOrderIntarface.delete(orderId);
        return new ResponseEntity<>(orderId, HttpStatus.OK);
    }

}
