package com.htp.controller;

import com.htp.controller.requests.OrderCreateRequest;
import com.htp.domain.Order;
import com.htp.domain.hibernate.HibernateOrder;
import com.htp.repository.hibernate.HibernateOrderIntarface;
import com.htp.tools.Util;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

@RestController
@CrossOrigin
@RequestMapping(value = "/rest/hibernate/order")
public class ProworkHibernate {

    @Autowired
    private HibernateOrderIntarface hibernateOrderIntarface;

    @GetMapping("/all")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<List<HibernateOrder>> getUsersHibernate() {
        return new ResponseEntity<>(hibernateOrderIntarface.findAll(), HttpStatus.OK);
    }

    @PostMapping("/add")
    @Transactional
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<HibernateOrder> createOrder(@RequestBody OrderCreateRequest request) {
        HibernateOrder hibernateOrder = new HibernateOrder();
        //userID is empty - will be generated by DB
        hibernateOrder.setType(request.getType());
        hibernateOrder.setDescription(request.getDescription());
        hibernateOrder.setAddress(request.getAddress());
        hibernateOrder.setLatitude(request.getLatitude());
        hibernateOrder.setLongtitude(request.getLongtitude());
        hibernateOrder.setIdClient(request.getIdClient());
        hibernateOrder.setCountWorker(request.getCountWorker());
        hibernateOrder.setDateCreate(new Timestamp(new Date().getTime()));
        hibernateOrder.setDateFromOrder(Util.convertStringToTimestamp(request.getDateFromOrder()));
        hibernateOrder.setStatus(request.getStatus());
        hibernateOrder.setPrioritet(request.getPrioritet());

        return new ResponseEntity<>(hibernateOrderIntarface.save(hibernateOrder), HttpStatus.OK);
    }

    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibernateOrder> updateOrder(@ApiParam(value = "Order ID", required = false) @PathVariable("id") Long orderId,
                                                   @RequestBody OrderCreateRequest request) {

        hibernateOrderIntarface.findById(orderId);

        HibernateOrder hibernateOrder = new HibernateOrder();
        //userID is empty - will be generated by DB
        hibernateOrder.setId(orderId);
        hibernateOrder.setType(request.getType());
        hibernateOrder.setDescription(request.getDescription());
        hibernateOrder.setAddress(request.getAddress());
        hibernateOrder.setLatitude(request.getLatitude());
        hibernateOrder.setLongtitude(request.getLongtitude());
        hibernateOrder.setIdClient(request.getIdClient());
        hibernateOrder.setCountWorker(request.getCountWorker());
        hibernateOrder.setDateCreate(new Timestamp(new Date().getTime()));
        hibernateOrder.setDateFromOrder(Util.convertStringToTimestamp(request.getDateFromOrder()));
        hibernateOrder.setStatus(request.getStatus());
        hibernateOrder.setPrioritet(request.getPrioritet());

        return new ResponseEntity<>(hibernateOrderIntarface.update(hibernateOrder), HttpStatus.OK);
    }

    @RequestMapping(value = "getOrderById/{id}", method = RequestMethod.GET)
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<HibernateOrder> getOrderById(@PathVariable("id") Long orderId) {
        return new ResponseEntity<>(hibernateOrderIntarface.findById(orderId), HttpStatus.OK);
    }

    @DeleteMapping("/delete/{id}")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<Long> deleteOrder(@PathVariable("id") Long orderId) {
        hibernateOrderIntarface.delete(orderId);
        return new ResponseEntity<>(orderId, HttpStatus.OK);
    }

}
